1. Уровни изоляции
------------------
Для всех заданий этого пункта в первой строке должно быть приведено объявление начала транзакции. Остальные строки должны содержать комментарии (--), обосновывающие выбор уровня изоляции транзакции.
----------------
1.1. FreeSeats *
----------------
start transaction read only isolation level read committed;
-- В ситуации, когда несколько пользователей борятся за места, read uncommitted
-- недостаточно, если некоторые пользователи отменят своё действие
-- (грязное чтение недопустимо);
-- "косая запись" только при записи, здесь же только чтение;
-- "фантомная запись" при повторном чтении, а здесь единожды;
-- то же самое и с аномалией "неповторяемое чтение".
--------------
1.2. Reserve *
--------------
start transaction read write isolation level serializable;
-- Недопустима ситуация, в которой один пользователь хочет забронировать,
-- а параллельно ему другой выкупает это место
------------------------
1.3. ExtendReservation *
------------------------
start transaction read write isolation level read committed;
-- read uncommitted не подходит при записи;
-- 3 аномалии уровня read committed и выше не мешают
--------------
1.4. BuyFree *
--------------
start transaction read write isolation level serializable;
-- Недопустима ситуация, в которой один пользователь хочет купить место,
-- а параллельно ему другой бронирует это место
------------------
1.5. BuyReserved *
------------------
start transaction read write isolation level read committed;
-- read uncommitted не подходит при записи;
-- 3 аномалии уровня read committed и выше не мешают
------------------------
1.6. FlightsStatistics *
------------------------
start transaction read only isolation level read uncommitted;
-- Запрос только на чтение, поэтому достаточно такого уровня изоляции
-----------------
1.7. FlightStat *
-----------------
start transaction read only isolation level read committed;
-- Допустима ситуация, когда несколько пользователей смотрят места одновременно
-- и из-за этого недостаточно read uncommitted
--------------------
1.8. CompressSeats *
--------------------
start transaction read write isolation level snapshot;
-- repeatable read недостоточно при параллельной покупке и (или) бронирования
-- "косая запись" не помешает

2. Сценарий
-----------
-----------------
2.0. Общий план *
-----------------
Изложите общий план реализации, в том числе на каком этапе какие данные будут получены и как использованы
Запрос списка свободных мест и отображеие списка свободных мест пользователю: sql запрос FreeSeats вместе с транзакцией Бронирование или покупка места, выбранного пользователем. sql запрос Reserve или BuyFree с учётом транзакции
-----------------------------------
2.1. Запрос списка свободных мест *
-----------------------------------
Приведите соответствующие SQL-запросы
-------------------------------------
start transaction read only isolation level read committed;
select FreeSeats(:FlightId);
commit and no chain;
-------------------------------------
2.2. Взаимодействие с пользователем *
-------------------------------------
Укажите как будет релизовано взаимодействие с пользователем
-----------------------------------------------------------
Пользователь вводит данные, переменные используются на вызов процедур и (или) функций. При пустом ответе базы данных или ошибках пользовтелю возможна отправка специальных сообщений, сформированных на типе результата запроса, если представить, что взаимодействие пользовтеля с базой происходит, например, через сайт запросом в backend
------------------------
2.3. Действия с местом *
------------------------
Приведите соответствующие SQL-запросы
-------------------------------------
start transaction read write isolation level serializable;
-- если бронирование
select Reserve(:UserId, :Pass, :FlightId, :SeatNo);
-- если покупка места
select BuyFree(:FlightId, :SeatNo);
commit and no chain;
